from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image, PageBreak
)
from datetime import datetime
import os
from config import BASE_DN

def get_domain_name():
    parts = BASE_DN.replace('dc=', '').split(',')
    return '.'.join(parts)

def add_footer(canvas, doc):
    canvas.saveState()
    canvas.setFont("Helvetica", 8)
    canvas.setFillColor(colors.grey)
    footer_text = f"Confidential – {get_domain_name()} – Generated on {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    canvas.drawString(40, 25, footer_text)
    canvas.restoreState()

def generate_pdf_report(eval_results, policy_text, compliance_lines, output_path):
    doc = SimpleDocTemplate(output_path, pagesize=A4)
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name='TitleLarge', fontSize=18, alignment=1, spaceAfter=20))
    styles.add(ParagraphStyle(name='Subtitle', fontSize=12, spaceAfter=8))
    styles.add(ParagraphStyle(name='RiskItem', fontSize=10, leftIndent=10))
    story = []

    domain = get_domain_name()

    # Cover Page
    logo_path = "static/images/logo.png"
    if os.path.exists(logo_path):
        logo = Image(logo_path, width=80, height=80)
        logo.hAlign = 'CENTER'
        story.append(logo)
        story.append(Spacer(1, 10))

    story.append(Paragraph("Active Directory Password Audit Report", styles['TitleLarge']))
    story.append(Paragraph("Generated by: PassAudit Pro", styles['Normal']))
    story.append(Paragraph(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles['Normal']))
    story.append(Paragraph(f"Company: {domain}", styles['Normal']))
    story.append(Spacer(1, 40))
    story.append(Paragraph("This confidential report analyzes the strength and security of Active Directory user passwords, highlights top risks, and evaluates compliance with password policies.", styles['Normal']))
    story.append(PageBreak())

    # Executive Summary
    total = len(eval_results)
    cracked = [r for r in eval_results if r[2] != "Uncracked"]
    weak = [r for r in cracked if r[2] == "Weak"]
    fair = [r for r in cracked if r[2] == "Fair"]
    strong = [r for r in cracked if r[2] == "Strong"]
    very_strong = [r for r in cracked if r[2] == "Very Strong"]

    cracked_pct = round(len(cracked) / total * 100, 1) if total else 0
    weak_pct = round(len(weak) / total * 100, 1) if total else 0

    story.append(Paragraph("Executive Summary", styles['Heading2']))
    summary_data = [
        ["Metric", "Value"],
        ["Total Users Evaluated", total],
        ["Cracked Passwords", f"{len(cracked)} ({cracked_pct}%)"],
        ["Weak Passwords", f"{len(weak)} ({weak_pct}%)"],
        ["Fair Passwords", len(fair)],
        ["Strong Passwords", len(strong)],
        ["Very Strong Passwords", len(very_strong)],
    ]
    summary_table = Table(summary_data, colWidths=[200, 200])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.black),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
    ]))
    story.append(summary_table)
    story.append(Spacer(1, 16))

    # Top Risks
    story.append(Paragraph("Top Risks", styles['Heading2']))
    risks = []
    if weak_pct >= 30: risks.append("⚠️ High percentage of weak passwords.")
    if cracked_pct >= 50: risks.append("⚠️ More than 50% of passwords were cracked.")
    if any("admin" in r[0].lower() for r in cracked): risks.append("⚠️ Cracked password contains administrative usernames.")
    if not risks: risks.append("✅ Password posture appears acceptable.")
    for risk in risks:
        story.append(Paragraph(risk, styles['RiskItem']))
    story.append(PageBreak())

    # Policy Comparison
    story.append(Paragraph("Password Policy vs Best Practices", styles['Heading2']))
    expected = {
        "Minimum Password Length": "12",
        "Password History Length": "5",
        "Maximum Password Age (days)": "90",
        "Minimum Password Age (days)": "0",
        "Account Lockout Threshold": "5"
    }
    policy_dict = {}
    for line in policy_text.splitlines():
        if ':' in line:
            k, v = line.split(':', 1)
            policy_dict[k.strip()] = v.strip()

    applied = all(policy_dict.get(k) == expected[k] for k in expected)
    rows = [["Policy Item", "Current Setting", "Best Practice"]]
    for key in expected:
        rows.append([key, policy_dict.get(key, "—"), expected[key]])

    policy_table = Table(rows)
    policy_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.black),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('GRID', (0, 0), (-1, -1), 0.4, colors.grey)
    ]))
    story.append(policy_table)
    story.append(Spacer(1, 12))

    checkbox = "☑ Best Practice Policy is Applied" if applied else "☐ Best Practice Policy is NOT Fully Applied"
    story.append(Paragraph(checkbox, styles['Normal']))
    story.append(Spacer(1, 20))

    # Compliance Feedback
    if compliance_lines:
        story.append(Paragraph("Compliance Summary", styles['Heading3']))
        for line in compliance_lines:
            story.append(Paragraph(line, styles['Normal']))
        story.append(PageBreak())

    # Evaluation Table
    story.append(Paragraph("Full Password Evaluation Results", styles['Heading2']))
    sorted_results = sorted(eval_results, key=lambda r: (
        {"Very Strong": 1, "Strong": 2, "Fair": 3, "Weak": 4, "Uncracked": 5}.get(r[2], 6),
        r[0].lower()
    ))

    reason_style = ParagraphStyle(
        name='reason',
        fontName='Helvetica',
        fontSize=8,
        leading=10,
        wordWrap='CJK'
    )

    table_data = [["Username", "Password", "Strength", "Score", "Reason"]]
    for username, password, strength, score, reason in sorted_results:
        wrapped_reason = Paragraph(reason.replace(",", ", "), reason_style)
        table_data.append([username, password, strength, score, wrapped_reason])

    col_widths = [80, 100, 70, 50, 190]

    table = Table(table_data, colWidths=col_widths, repeatRows=1)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.black),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('GRID', (0, 0), (-1, -1), 0.4, colors.grey),
    ]))
    story.append(table)

    doc.build(story, onFirstPage=add_footer, onLaterPages=add_footer)
